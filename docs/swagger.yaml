basePath: /api
definitions:
  web.ApiResponse-array_web_RoleResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        items:
          $ref: '#/definitions/web.RoleResponse'
        type: array
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.ApiResponse-array_web_TodoResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        items:
          $ref: '#/definitions/web.TodoResponse'
        type: array
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.ApiResponse-array_web_UserResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        items:
          $ref: '#/definitions/web.UserResponse'
        type: array
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.ApiResponse-web_AuthResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/web.AuthResponse'
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.ApiResponse-web_RoleResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/web.RoleResponse'
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.ApiResponse-web_TodoResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/web.TodoResponse'
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.ApiResponse-web_UserResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/web.UserResponse'
      message:
        example: success
        type: string
      ok:
        example: true
        type: boolean
    type: object
  web.AuthLoginRequest:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  web.AuthResponse:
    properties:
      token:
        type: string
    type: object
  web.InternalServerErrorResponse:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal_server_error
        type: string
      ok:
        example: false
        type: boolean
    type: object
  web.NotFoundErrorResponse:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: not_found_error
        type: string
      ok:
        example: false
        type: boolean
    type: object
  web.RoleCreateRequest:
    properties:
      name:
        example: SUPERADMIN
        maxLength: 50
        minLength: 0
        type: string
    required:
    - name
    type: object
  web.RoleResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  web.RoleUpdateRequest:
    properties:
      id:
        type: integer
      name:
        example: ADMIN
        maxLength: 50
        minLength: 0
        type: string
    required:
    - id
    - name
    type: object
  web.TodoCreateRequest:
    properties:
      title:
        maxLength: 200
        type: string
      user_id:
        type: integer
    required:
    - title
    - user_id
    type: object
  web.TodoResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/web.UserResponse'
    type: object
  web.TodoUpdateRequest:
    properties:
      id:
        type: integer
      status:
        enum:
        - DONE
        - PENDING
        type: string
      title:
        maxLength: 200
        type: string
      user_id:
        type: integer
    required:
    - id
    - status
    - title
    - user_id
    type: object
  web.UnAuthorizedErrorResponse:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: unauthorized_error
        type: string
      ok:
        example: false
        type: boolean
    type: object
  web.UserCreateRequest:
    properties:
      email:
        type: string
      role_id:
        type: integer
      username:
        maxLength: 200
        type: string
    required:
    - email
    - role_id
    - username
    type: object
  web.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/web.RoleResponse'
      updated_at:
        type: string
      username:
        type: string
    type: object
  web.UserUpdateRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        maxLength: 200
        type: string
    required:
    - email
    - id
    - username
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample todo api (CRUD).
  title: Todo Restful API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authentication with login
      parameters:
      - description: all fields is require
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_AuthResponse'
      summary: Auth login
      tags:
      - Auth
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieve all existing role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-array_web_RoleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      security:
      - Bearer: []
      summary: Get all role
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create new role
      parameters:
      - description: all fields is require
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.RoleCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_RoleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      security:
      - Bearer: []
      summary: Create new role
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing roles base on id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_RoleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Delete roles base on id
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Retrieve existing role base on id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_RoleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Get role base on id
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update existing role base on id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: integer
      - description: ignore or delete id field on request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_RoleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Update role base on id
      tags:
      - Roles
  /todos:
    post:
      consumes:
      - application/json
      description: Create new todo
      parameters:
      - description: all fields is require
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.TodoCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_TodoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Create new todo
      tags:
      - Todos
  /todos/{id}:
    put:
      consumes:
      - application/json
      description: Update existing todo base on id
      parameters:
      - description: todo id
        in: path
        name: role_id
        required: true
        type: integer
      - description: user id
        in: path
        name: user_id
        required: true
        type: integer
      - description: ignore or delete id field on request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.TodoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_TodoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Update todo base on id
      tags:
      - Todos
  /todos/{todo_id}/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete existing todo base on id and user id
      parameters:
      - description: todo id
        in: path
        name: todo_id
        required: true
        type: integer
      - description: user id
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_TodoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Delete todo base on id
      tags:
      - Todos
  /todos/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve existing todo base on user id
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-array_web_TodoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Get all todo base on user id
      tags:
      - Todos
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve all existing user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-array_web_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Get all user
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: all fields is require | username field shoud not contains whitespace
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Create new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing user base on id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Delete user base on id
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve existing user base on id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Get user base on id
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update existing user base on id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: ignore/delete id field on request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/web.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.ApiResponse-web_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.NotFoundErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerErrorResponse'
      summary: Update user base on id
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
